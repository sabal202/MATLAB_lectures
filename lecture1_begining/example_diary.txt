x = 5

x =

     5

y = 10

y =

    10

z = x*y

z =

    50

save work1
diary off
z = 1 + 2i

z =

   1.0000 + 2.0000i

real(z)

ans =

     1

imag(z)

ans =

     2

abs(z)

ans =

    2.2361

angle(z)

ans =

    1.1071

angle(degrees(z))
{Undefined function or variable 'degrees'.
} 
angle(deg(z))
{Undefined function or variable 'deg'.
} 
rad2deg(angle(z))

ans =

   63.4349

sign(0)

ans =

     0

sign(-12321)

ans =

    -1

complex(3, 4)

ans =

   3.0000 + 4.0000i

z1  = complex(3, 4)

z1 =

   3.0000 + 4.0000i

z1 * z2
{Undefined function or variable 'z2'.
} 
z1 .* z2
{Undefined function or variable 'z2'.
} 
z0 .* z1
{Undefined function or variable 'z0'.
} 
z .* z1

ans =

  -5.0000 +10.0000i

z * z1

ans =

  -5.0000 +10.0000i

sign(z)

ans =

   0.4472 + 0.8944i

help sign
 <strong>sign</strong>   Signum function.
    For each element of X, <strong>sign</strong>(X) returns 1 if the element
    is greater than zero, 0 if it equals zero and -1 if it is
    less than zero.  For the nonzero elements of complex X,
    <strong>sign</strong>(X) = X ./ ABS(X).
 
    See also <a href="matlab:help abs">abs</a>.

    <a href="matlab:doc sign">Reference page for sign</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('sign')">Other functions named sign</a>

abs(ans)

ans =

     1

plot(sign(z))
compass(z)
compass([z, -1.*sign(z))
 compass([z, -1.*sign(z))
                        
{Error: Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched
delimiters.
} 
compass([z, -1.*sign(z)])
compass([z, sign(z)])
m = [1 2 3
]

m =

     1     2     3

m = [1, 2, 3]

m =

     1     2     3

m = [1, 2, 3; 4, 5, 6; 7, 8, 9]

m =

     1     2     3
     4     5     6
     7     8     9

save work1.mat
A = [1 2 3]

A =

     1     2     3

B = [1;2;3]

B =

     1
     2
     3

C = [4 5 6; 7 8 9]

C =

     4     5     6
     7     8     9

[A B C]
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
[A,B,C]
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
D = [C, A]
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
D = [C; A]

D =

     4     5     6
     7     8     9
     1     2     3

D = [C, A]
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
D = [C, B]
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
D = [C; B]
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('vertcat')" style="font-weight:bold">vertcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
E = [D, B]

E =

     4     5     6     1
     7     8     9     2
     1     2     3     3

save work1.mat
diary off
j = D(:,j)
{Index in position 2 is invalid. Array indices must be positive integers or logical values.
} 
j = D(:,2)

j =

     5
     8
     2

D * E

ans =

    57    72    87    32
    93   117   141    50
    21    27    33    14

j = D(2,:)

j =

     7     8     9

help :
 :  Colon.
    J:K  is the same as [J, J+1, ..., J+m], where m = fix(K-J). In the 
    case where both J and K are integers, this is simply [J, J+1, ..., K]. 
    This syntax returns an empty matrix if J > K.
 
    J:I:K  is the same as [J, J+I, ..., J+m*I], where m = fix((K-J)/I). 
    This syntax returns an empty matrix when I == 0, I > 0 and J > K, or 
    I < 0 and J < K.
 
    <strong>colon</strong>(J,K) is the same as J:K and <strong>colon</strong>(J,I,K) is the same as J:I:K.
 
    The colon notation can be used to pick out selected rows, columns
    and elements of vectors, matrices, and arrays.  A(:) is all the
    elements of A, regarded as a single column. On the left side of an
    assignment statement, A(:) fills A, preserving its shape from before.
    A(:,J) is the J-th column of A.  A(J:K) is [A(J),A(J+1),...,A(K)].
    A(:,J:K) is [A(:,J),A(:,J+1),...,A(:,K)] and so on.
 
    The colon notation can be used with a cell array to produce a comma-
    separated list.  C{:} is the same as C{1},C{2},...,C{end}.  The comma
    separated list syntax is valid inside () for function calls, [] for
    concatenation and function return arguments, and inside {} to produce
    a cell array.  Expressions such as S(:).name produce the comma separated
    list S(1).name,S(2).name,...,S(end).name for the structure S.
 
    For the use of the colon in the FOR statement, See FOR.
    For the use of the colon in a comma separated list, See VARARGIN.

    <a href="matlab:doc colon">Reference page for colon</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('colon')">Other functions named colon</a>

doc colon
A(1:1.7:3, 2:3)
[Warning: Integer operands are required for colon operator when used as index] 
{Index in position 1 exceeds array bounds (must not exceed 1).
} 
B = A(1:1.7:3, 2:3)
[Warning: Integer operands are required for colon operator when used as index] 
{Index in position 1 exceeds array bounds (must not exceed 1).
} 
B = A(1:1.7:3,2:3)
[Warning: Integer operands are required for colon operator when used as index] 
{Index in position 1 exceeds array bounds (must not exceed 1).
} 
B = D(1:1.7:3,2:3)
[Warning: Integer operands are required for colon operator when used as index] 

B =

     5     6
     2     3

B = D(1 3,2:3)
 B = D(1 3,2:3)
         
{Error: Invalid expression. Check for missing multiplication operator, missing or unbalanced delimiters, or other syntax error. To
construct matrices, use brackets instead of parentheses.
} 
B = D(1,3;2:3)
 B = D(1,3;2:3)
          
{Error: Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched
delimiters.
} 
A = magic(3)

A =

     8     1     6
     3     5     7
     4     9     2

diary off
